entrypoint {
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, byte[])
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, byte[], int)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, byte[], int, int)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, byte[], int, int, java.lang.String)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, byte[], java.lang.String)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, char[])
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, char[], int, int)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, java.lang.String)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, java.lang.String, int, int)
    java.lang.String           java.lang.String._SQUAWK_INTERNAL_init(java.lang.String, java.lang.StringBuffer)

    java.lang.Object           java.lang.VM.do_checkcast(java.lang.Object, java.lang.Klass)
    boolean                    java.lang.VM.do_instanceof(java.lang.Object, java.lang.Klass)
    int                        java.lang.VM.do_getStaticInt(java.lang.Klass, int)
    long                       java.lang.VM.do_getStaticLong(java.lang.Klass, int)
    java.lang.Object           java.lang.VM.do_getStaticOop(java.lang.Klass, int)
    void                       java.lang.VM.do_putStaticInt(int, java.lang.Klass, int)
    void                       java.lang.VM.do_putStaticLong(long, java.lang.Klass, int)
    void                       java.lang.VM.do_putStaticOop(java.lang.Object, java.lang.Klass, int)
    int                        java.lang.VM.do_lcmp(long, long)
    int                        java.lang.VM.do_fcmpl(float, float)
    int                        java.lang.VM.do_fcmpg(float, float)
    int                        java.lang.VM.do_dcmpl(double, double)
    int                        java.lang.VM.do_dcmpg(double, double)
    void                       java.lang.VM.do_monitorenter(java.lang.Object)
    void                       java.lang.VM.do_monitorexit(java.lang.Object)
    java.lang.Object           java.lang.VM.do_new(java.lang.Klass)
    java.lang.Object           java.lang.VM.do_newarray(int, java.lang.Klass)
    java.lang.Object           java.lang.VM.do_newdimension(java.lang.Object[], int)
    void                       java.lang.VM.do_arrayOopStore(java.lang.Object, int, java.lang.Object)
    int                        java.lang.VM.do_lookup_b(int, byte[])
    int                        java.lang.VM.do_lookup_i(int, int[])
    int                        java.lang.VM.do_lookup_s(int, short[])
    java.lang.Object           java.lang.VM.do_throw(java.lang.Throwable)
    void                       java.lang.VM.do_arithmeticException()
    void                       java.lang.VM.do_arrayIndexOutOfBoundsException()
    void                       java.lang.VM.do_nullPointerException()
    void                       java.lang.VM.do_callRun(java.lang.Thread)
    void                       java.lang.VM.do_class_clinit(java.lang.Klass)
    void                       java.lang.VM.do_collectGarbage()
    void                       java.lang.VM.do_extend(int)
    int                        java.lang.VM.do_findSlot(java.lang.Object, java.lang.Klass, int)
    void                       java.lang.VM.do_yield()
    void                       java.lang.VM.do_undefinedNativeMethod(int)
    void                       java.lang.VM.do_startup(java.lang.Address, java.lang.Address, java.lang.Address, java.lang.Address, java.lang.Address, java.lang.Address, java.lang.Address, int, java.lang.Address, java.lang.Suite, int, java.lang.Address)
}

noinline {
    void                       java.lang.VM.collectGarbage()
    void                       java.lang.Thread.reschedule()
}
