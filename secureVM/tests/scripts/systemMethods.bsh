/**
 * This script file includes methods to find and delete files. Also provides
 * an alternate exec so that standard error output can be captured.
 *
 * @author Andrew Crouch
 * @see http://www.beanshell.org
 */

/**
 * find
 * Recursively searches for files or folders based on the given
 * search criteria.
 *
 * @param current The starting directory for the search
 * @param dirSearch True if we are searching only for directories
 * @param regex The regular expression indicating the files/folders
 * that are of interest.
 * @return LinkedList containing File objects matching
 * the search criteria.
 */
static LinkedList find(File current, boolean dirSearch, String regex)
{

        /* Holds a number of File objects */
        LinkedList testDirs = new LinkedList();

        /* This filter only returns sub directories */
        FileFilter subDirectory = new FileFilter() {
                public boolean accept(File file) {
                        return file.isDirectory();
                }
        };

        /* This filters what we are looking for */
        FileFilter matchesTest = new FileFilter() {
                public boolean accept(File file) {
                        if(dirSearch)
                        {
                                return file.getName().matches(regex) &&
                                        file.isDirectory();
                        }
                        else
                        {
                                return file.getName().matches(regex) &&
                                        !file.isDirectory();
                        }
                }
        };

        /* Get subdirectories */
        File[] dirs = current.listFiles(subDirectory);

        /* Get list of files/folders that match criteria */
        File[] isTest = current.listFiles(matchesTest);

        /* Add matches from sub folders */
        for(int i = 0; dirs != null && i < dirs.length; i++)
        {
                Collection c = find(dirs[i], dirSearch, regex);
                testDirs.addAll(c);
        }

        /* Add any matches from this folder */
        for(int i = 0; isTest != null && i < isTest.length; i++)
                testDirs.add(isTest[i]);

        return testDirs;
}



/**
 * delete
 * Deletes file or directory including subdirectories.
 *
 * @param startPoint The file or directory to delete
 */
static void delete(File startPointFile)
{
        String startPoint = startPointFile.getCanonicalPath();

        if(!startPointFile.exists())
        {
                if(DEBUG_LEVEL > 1)
                        print("File doesn't exist: " + startPoint);
                return;
        }

        if(startPointFile.isFile())
        {
                if(DEBUG_LEVEL > 1)
                        print("Removed file: " + startPoint);

                startPointFile.delete();
                return;
        }


        /* Remove all files in tree */
        LinkedList files = find(startPointFile, false, ALL_FILE_REGEX);
        LinkedList dirs = find(startPointFile, true, ALL_FILE_REGEX);

        if(DEBUG_LEVEL > 2)
                print("Removing files and folders from " + startPoint);


        while(files.size() > 0)
        {
                /* Grab each directory */
                File f = (File)files.removeFirst();

                if(DEBUG_LEVEL > 1)
                        print("Removed file: " + f.getCanonicalPath());

                f.delete();
        }

        while(dirs.size() > 0)
        {
                /* Grab each directory */
                File f = (File)dirs.removeFirst();

                if(DEBUG_LEVEL > 1)
                        print("Removed direcotry: " + f.getCanonicalPath());
                f.delete();
        }

        if(DEBUG_LEVEL > 1)
                print("Removed direcotry: " + startPointFile.getCanonicalPath());

        startPointFile.delete();
}


class OutputPollster extends java.lang.Thread
{
    private java.io.InputStream is;
    private boolean eacho;
    private StringWriter returnString;

    OutputPollster(java.io.InputStream is, boolean echo, StringWriter returnString)
    {
        this.is = is;
        this.echo = echo;
        this.returnString = returnString;
    }

    public void run()
    {
        int len;
        byte[] buf = new byte[128];
        try
        {
            while (-1 != (len = this.is.read(buf)))
            {
                String s = new String(buf, 0 , len);
                if(echo) {
                    System.out.print(s);
                }

                returnString.write(s);
            }

        } catch (java.io.IOException e) {
            error(e.getStackTrace());
        }
    }
}//end OutputPollster definition



/**
 * exec2
 * Runs the process, but allows us to redirect standard streams.
 * NB. There is no mechanism to allow for input stream. If input
 * is required, the program will hang waiting for input.
 *
 * @param String command line string.
 * @return String String containing the error stream.
 */
static String exec2(String command, boolean echo) throws IOException
{
        StringWriter errorString = new StringWriter();
        StringWriter outputString = new StringWriter();


        if(DEBUG_LEVEL > 2)
                System.out.println(command);
        try
        {
            java.lang.Runtime rt = Runtime.getRuntime();
            java.lang.Process p = rt.exec(command);

            Thread err = new OutputPollster(p.getErrorStream(), echo, errorString);
            Thread out = new OutputPollster(p.getInputStream(), echo, outputString);

            err.start();
            out.start();

            /**
             * Wait for process to finish.
             */
            p.waitFor();

            /**
             * Wait for both streams to reach end
             */
             err.join();
             out.join();

      } catch (IOException e) {
                   error("An error occured while attempting to run " + command);
                   error(e.getStackTrace());
      }

      return errorString.toString();
}
