/*
 * Copyright 2004 Sun Microsystems, Inc. All Rights Reserved.
 *
 * This software is the proprietary information of Sun Microsystems, Inc.
 * Use is subject to license terms.
 *
 * This is a part of the Squawk JVM.
 */

    /*-----------------------------------------------------------------------*\
     *                           Memory access verification                  *
    \*-----------------------------------------------------------------------*/

/**
 * Comment the following line for %50 slower but better type checking
 */
#define FASTER_SET_TYPES

/**
 * Comment the following line for assume code that is 20% faster.
 */
//#define SETASSUMES ASSUME

/**
 * Address to look for in setType()
 */
#define BADSETTYPE 0

/**
 * Fast object allocation
 */
#define FASTALLOC true

#if SETASSUMES
#define setAssume(x) assume(x)
int     getByte(Address oop, int offset);
int     getUShort(Address oop, int offset);
UWord   getUWord(Address oop, int offset);
jlong   getLong(Address oop, int offset);
jlong   getLongAtWord(Address oop, int offset);
Address getObject(Address oop, int offset);
#else
#define setAssume(x) /**/
#endif

#ifdef WRITE_BARRIER
void    setBitFor(Address ea);
#define SETWRITEBARRIERBITFOR(x) setBitFor(x)
#else
#define SETWRITEBARRIERBITFOR(x) /**/
#endif /* WRITE_BARRIER */

#ifndef C_PARMS_LEFT_TO_RIGHT
#define C_PARMS_LEFT_TO_RIGHT false
#endif

#ifndef C_PARMS_RIGHT_TO_LEFT
#define C_PARMS_RIGHT_TO_LEFT false
#endif

        /*-----------------------------------------------------------------------*\
         *                            Type map checking                          *
        \*-----------------------------------------------------------------------*/

#if TYPEMAP
        /**
         * Gets the ASCII character representing a given type.
         *
         * @param type  the type to represent
         * @return the ASCII representation of 'type'
         */
/*INL*/ char getTypeMnemonic(char $type) {
            return AddressType_Mnemonics[$type & AddressType_TYPE_MASK];
        }

        /**
         * Gets the address at which the type for a given address is recorded.
         *
         * @param ea   the address for which the type is being queried
         * @return the address at which the type for 'ea' is recorded
         */
/*INL*/ char *getTypePointer(Address $ea) {
            return (char *)$ea + memorySize;
        }

        /**
         * Records the type of the value written to a given address.
         *
         * @param ea   the address written to
         * @param type the type of the value written to 'ea'
         * @param size the length in bytes of the field
         */
/*INL*/ void setType(Address $ea, char $type, int $size) {
/*if (sp != 0) fprintf(stderr, format("setType @ %A is %c\n"), ea, getTypeMnemonic(type));*/

            char *ptr = getTypePointer($ea);
            switch ($size) {
                case 1:                                                                            break;
                case 2: *( (unsigned short *)ptr)    = (unsigned short)AddressType_UNDEFINED_WORD; break;
                case 4: *( (unsigned int   *)ptr)    = (unsigned int)  AddressType_UNDEFINED_WORD; break;
                case 8: *( (unsigned int   *)ptr)    = (unsigned int)  AddressType_UNDEFINED_WORD;
                        *(((unsigned int   *)ptr)+1) = (unsigned int)  AddressType_UNDEFINED_WORD; break;
                default: fatalVMError("unknown size in setType()");
            }
            *ptr = $type;

            if (BADSETTYPE && $ea == (Address)BADSETTYPE) {
                openTraceFile();
                fprintf(
                        traceFile,
                        format("setType @ %A is %c,  [ea - rom = %A]\n"),
                        $ea,
                        getTypeMnemonic($type),
                        Address_diff($ea, java_lang_VM_romStart)
                       );
                printStackTrace("setType");
            }
        }

        /**
         * Verifies that the type of the value at a given address matches a given type.
         *
         * @param ea   the address to test
         * @param type the type to match
         */
        void checkTypeError(Address ea, char recordedType, char type) {
            fprintf(
                    stderr,
                    format("checkType @ %A is %c, not %c  [ea - rom = %A]\n"),
                    ea,
                    getTypeMnemonic(recordedType),
                    getTypeMnemonic(type),
                    Address_diff(ea, java_lang_VM_romStart)
                   );
            fatalVMError("memory access type check failed");
        }

        /**
         * Verifies that the type of the value at a given address matches a given type.
         *
         * @param ea   the address to test
         * @param type the type to match
         */
/*INL*/ void checkType2(Address $ea, char $recordedType, char $type) {
            char recordedType = (char)($recordedType & AddressType_TYPE_MASK);
            if (recordedType != AddressType_ANY && recordedType != $type) {
                checkTypeError($ea, recordedType, $type);
            }
        }

    /**
     * Verifies that the type of the value at a given address matches a given type.
     *
     * @param ea   the address to test
     * @param type the type to match
     * @param size the length in bytes of the field
     */
/*INL*/ Address checkType(Address $ea, char $type, int $size) {
            /*if (lo($ea, memory) || hieq($ea, memoryEnd)) {
                fprintf(stderr, format("access outside of 'memory' chunk: %A\n"), $ea);
                return;
            };*/

            /* AddressType_ANY always matches */
            if ($type != AddressType_ANY) {
                char *a = (char *)$ea;
                char *p = getTypePointer($ea);
                char fillType = ($type == AddressType_BYTECODE) ? AddressType_BYTECODE : AddressType_UNDEFINED;
#ifdef FASTER_SET_TYPES
                checkType2(a++, *p, $type);
#else
                switch ($size) {
                    case 8: {
                        checkType2(a++, *p++, $type);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        break;
                    }
                    case 4: {
                        checkType2(a++, *p++, $type);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        checkType2(a++, *p++, fillType);
                        break;
                    }
                    case 2: {
                        checkType2(a++, *p++, $type);
                        checkType2(a++, *p++, fillType);
                        break;
                    }
                    case 1: {
                        checkType2(a++, *p, $type);
                        break;
                    }
                    default: shouldNotReachHere();
                }
#endif
            }
            return $ea;
        }

        /**
         * Gets the type recorded for a given address.
         *
         * @param  the address to test
         */
/*MAC*/ char getType(Address $ea) {
            return *getTypePointer($ea);
        }

        /**
         * Gets the type of the value that is written to memory by the current memory mutating instruction.
         * This method assumes that the current value of 'ip' is one byte past the current
         * instruction (i.e. it points to the opcode of the next instruction).
         */
/*DEF*/ char getMutationType() {
            return (char)((*getTypePointer(ip - 1) >> AddressType_MUTATION_TYPE_SHIFT) & AddressType_TYPE_MASK);
        }

        /**
         * Sets the type recorded for each address in a range of word-aligned memory to be AddressType_ANY, the default for every type.
         *
         * @param start   the start address of the memory range
         * @param end     the end address of the memory range
         */
        void zeroTypes(Address start, Address end) {
            /* memset is not used as this can only be called on the service thread. */
            UWordAddress s = (UWordAddress)(getTypePointer(start));
            UWordAddress e = (UWordAddress)(getTypePointer(end));
            assume(isWordAligned((UWord)s));
            assume(isWordAligned((UWord)e));
            while (s < e) {
                *s++ = AddressType_ANY_WORD;
            }
        }

        /**
         * Block copies the types recorded for a range of memory to another range of memory.
         *
         * @param src    the start address of the source range
         * @param dst    the start address of the destination range
         * @param length the length (in bytes) of the range
         */
        void copyTypes(Address src, Address dst, int length) {
            /* memmove is not used as this can only be called on the service thread. */
            assume(length >= 0);
/*fprintf(stderr, format("copyTypes: src=%A, dst=%A, length=%d\n"), src, dst, length);*/
            if (lo(src, dst)) {
                char *s = getTypePointer(src) + length;
                char *d = getTypePointer(dst) + length;
                char *end = getTypePointer(src);
                while (s != end) {
                    *--d = *--s;
                }
            } else if (hi(src, dst)) {
                char *s = getTypePointer(src);
                char *d = getTypePointer(dst);
                char *end = s + length;
                while (s != end) {
                    *d++ = *s++;
                }
            }
        }

#else

/**
 * These macros disable the type checking for a production build.
 * A macro replacement for 'getType()' is intentionally omitted.
 */
#define setType(ea, type, size)
#define checkType(ea, type, size)     ea
#define setTypeRange(ea, length, type)
#define zeroTypes(start, end)
#define copyTypes(src, dst, length)
#define getMutationType() 0
        char getType(Address ea) {
            fatalVMError("getType() called without TYPEMAP");
            return 0;
        }
#endif /* TYPEMAP */

    /*-----------------------------------------------------------------------*\
     *                              Memory addressing                        *
    \*-----------------------------------------------------------------------*/

        /**
         * Given a base address and offset to a byte value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in bytes) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value specified by 'oop' and 'offset'
         */
/*MAC*/ signed char getByteTyped(Address $base, Offset $offset, char $type) {
            return *((signed char *)checkType(&((signed char *)$base)[$offset], $type, 1));
        }

        /**
         * Given a base address and offset to a byte value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in bytes) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value specified by 'oop' and 'offset'
         */
/*MAC*/ unsigned char getUByteTyped(Address $base, Offset $offset, char $type) {
            return *((unsigned char *)checkType(&((unsigned char *)$base)[$offset], $type, 1));
        }

        /**
         * Given a base address and offset to a byte value, sets the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in bytes) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setByteTyped(Address $base, Offset $offset, char $type, signed char $value) {
            signed char *ea = &((signed char *)$base)[$offset];
            setType(ea, $type, 1);
            *ea = $value;
            checkPostWrite(ea, 1);
        }

        /**
         * Given a base address and offset to a short value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value
         */
/*MAC*/ short getShortTyped(Address $base, Offset $offset, char $type) {
            return *((short *)checkType(&((short *)$base)[$offset], $type, 2));
        }

        /**
         * Given a base address and offset to a short value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value
         */
/*MAC*/ unsigned short getUShortTyped(Address $base, Offset $offset, char $type) {
            return *((unsigned short *)checkType(&((unsigned short *)$base)[$offset], $type, 2));
        }

        /**
         * Given a base address and offset to a short value, sets the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setShortTyped(Address $base, Offset $offset, char $type, short $value) {
            short *ea = &((short *)$base)[$offset];
            setType(ea, $type, 2);
            *ea = $value;
            checkPostWrite(ea, 2);
        }

        /**
         * Given a base address and offset to an integer value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 32 bit words) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value specified by 'oop' and 'offset'
         */
/*MAC*/ int getIntTyped(Address $base, Offset $offset, char $type) {
            return *((int *)checkType(&((int *)$base)[$offset], $type, 4));
        }

        /**
         * Given a base address and offset to an integer value, sets the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 32 bit words) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setIntTyped(Address $base, Offset $offset, char $type, int $value) {
            int *ea = &((int *)$base)[$offset];
            setType(ea, $type, 4);
            *ea = $value;
            checkPostWrite(ea, 4);
        }

        /**
         * Given a base address and offset to a 64 bit value, returns the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value
         */
/*MAC*/ jlong getLongAtWordTyped(Address $base, Offset $offset, char $type) {
            return *((jlong *)checkType(&((UWordAddress)$base)[$offset], $type, 8));
        }

        /**
         * Given a base address and offset to a 64 bit value, sets the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setLongAtWordTyped(Address $base, Offset $offset, char $type, jlong $value) {
            jlong *ea = (jlong *)&((UWordAddress)$base)[$offset];
            setType(ea, $type, 8);
            *ea = $value;
            checkPostWrite(ea, 8);
        }

        /**
         * Given a base address and offset to a 64 bit value, return the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 64 bit words) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value
         */
/*MAC*/ jlong getLongTyped(Address $base, Offset $offset, char $type) {
            return *((jlong *)checkType(&((jlong *)$base)[$offset], $type, 8));
        }

        /**
         * Given a base address and offset to a 64 bit value, set the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in 64 bit words) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setLongTyped(Address $base, Offset $offset, char $type, jlong $value) {
            jlong *ea = (jlong *)&((jlong *)$base)[$offset];
            setType(ea, $type, 8);
            *ea = $value;
            checkPostWrite(ea, 8);
        }

        /**
         * Given a base address and offset to a UWord value, return the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' at which to write
         * @param type   the expected type of the value about to be read from the effective address
         * @return       the value
         */
#if SQUAWK_64
/*MAC*/ UWord getUWordTyped(Address $base, Offset $offset, char $type) {
            return (UWord)getLongTyped($base, $offset, $type);
        }
#else
/*MAC*/ UWord getUWordTyped(Address $base, Offset $offset, char $type) {
            return (UWord)getIntTyped($base, $offset, $type);
        }
#endif

        /**
         * Given a base address and offset to a UWord value, set the corresponding value.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' at which to write
         * @param type   the type of the value about to be written to the effective address
         * @param value  the value
         */
/*MAC*/ void setUWordTyped(Address $base, Offset $offset, char $type, UWord $value) {
            if (sizeof(UWord) == sizeof(int)) {
                setIntTyped($base, $offset, $type, (UWord)$value);
            } else {
                setLongTyped($base, $offset, $type, (UWord)$value);
            }
        }



        /*-----------------------------------------------------------------------*\
         *                           Memory access interface                     *
        \*-----------------------------------------------------------------------*/

        /**
         * Sets an 8 bit value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in bytes) from 'base' at which to write
         * @param value the value to write
         */
/*MAC*/ void setByte(Address $base, Offset $offset, int $value) {
            setByteTyped($base, $offset, AddressType_BYTE, (signed char)$value);
            setAssume(($value & 0xFF) == (getByte($base, $offset) & 0xFF));
        }

        /**
         * Sets a 16 bit value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' at which to write
         * @param value  the value to write
         */
/*MAC*/ void setShort(Address $base, Offset $offset, int $value) {
            setShortTyped($base, $offset, AddressType_SHORT, (short)$value);
            setAssume(($value & 0xFFFF) == getUShort($base, $offset));
        }

        /**
         * Sets a 32 bit value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in 32 bit words) from 'base' at which to write
         * @param value  the value to write
         */
/*MAC*/ void setInt(Address $base, Offset $offset, int $value) {
            setIntTyped($base, $offset, AddressType_INT, $value);
            setAssume($value == getInt($base, $offset));
        }

        /**
         * Sets a UWord value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from oop at which to write
         * @param value  the value to write
         */
/*MAC*/ void setUWord(Address $base, Offset $offset, UWord $value) {
            setUWordTyped($base, $offset, AddressType_UWORD, $value);
            setAssume($value == getUWord($base, $offset));
        }

        /**
         * Sets a pointer value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from oop at which to write
         * @param value  the value to write
         */
/*MAC*/ void setObject(Address $base, Offset $offset, Address $value) {
            setUWordTyped($base, $offset, AddressType_REF, (UWord)$value);
            setAssume($value == getObject($base, $offset));
        }

        /**
         * Sets a pointer value in memory and updates write barrier bit for the pointer if
         * a write barrier is being maintained.
         *
         * @param base   the base address
         * @param offset the offset to a field in the object
         */
/*MAC*/ void setObjectAndUpdateWriteBarrier(Address $base, Offset $offset, Address $value) {
            setObject($base, $offset, $value);
            if (sizeof(UWord) == sizeof(int)) {
                SETWRITEBARRIERBITFOR( & ((int * )$base)[$offset]);
            } else {
                SETWRITEBARRIERBITFOR( & ((long * )$base)[$offset]);
            }
        }

        /**
         * Sets a 64 bit value in memory.
         *
         * @param base   the base address
         * @param offset the offset (in 64 bit words) from 'base' at which to write
         * @param value  the value to write
         */
/*MAC*/ void setLong(Address $base, Offset $offset, jlong $value) {
            setLongTyped($base, $offset, AddressType_LONG, $value);
            setAssume($value == getLong($base, $offset));
        }

        /**
         * Sets a 64 bit value in memory at a UWord offset.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' at which to write
         * @param value  the value to write
         */
/*MAC*/ void setLongAtWord(Address $base, Offset $offset, jlong $value) {
            if (SQUAWK_64 || PLATFORM_UNALIGNED_LOADS) {
                setLongAtWordTyped($base, $offset, AddressType_LONG, $value);
            } else {
                const int highOffset = (PLATFORM_BIG_ENDIAN) ? $offset     : $offset + 1;
                const int lowOffset  = (PLATFORM_BIG_ENDIAN) ? $offset + 1 : $offset;
                setIntTyped($base, highOffset, AddressType_LONG,  (int)($value >> 32));
                setIntTyped($base, lowOffset,  AddressType_LONG2, (int) $value);
            }
            setAssume($value == getLongAtWord($base, $offset));
        }

        /**
         * Gets a signed 8 bit value from memory.
         *
         * @param base   the base address
         * @param offset the offset (in bytes) from 'base' from which to load
         * @return the value
         */
/*MAC*/ int getByte(Address $base, Offset $offset) {
            return getByteTyped($base, $offset, AddressType_BYTE);
        }

        /**
         * Gets a signed 16 bit value from memory.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' from which to load
         * @return the value
         */
/*MAC*/ int getShort(Address $base, Offset $offset) {
            return getShortTyped($base, $offset, AddressType_SHORT);
        }

        /**
         * Gets an unsigned 16 bit value from memory.
         *
         * @param base   the base address
         * @param offset the offset (in 16 bit words) from 'base' from which to load
         * @return the value
         */
/*MAC*/ int getUShort(Address $base, Offset $offset) {
            return getUShortTyped($base, $offset, AddressType_SHORT);
        }

        /**
         * Gets a signed 32 bit value from memory.
         *
         * @param base   the base address
         * @param offset the offset (in 32 bit words) from 'base' from which to load
         * @return the value
         */
/*MAC*/ int getInt(Address $base, Offset $offset) {
            return getIntTyped($base, $offset, AddressType_INT);
        }

        /**
         * Gets a UWord value from memory.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' from which to load
         * @return the value
         */
/*MAC*/ UWord getUWord(Address $base, Offset $offset) {
            return getUWordTyped($base, $offset, AddressType_UWORD);
        }

        /**
         * Gets a pointer from memory.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' from which to load
         * @return the value
         */
/*MAC*/ Address getObject(Address $base, Offset $offset) {
            return (Address)getUWordTyped($base, $offset, AddressType_REF);
        }

        /**
         * Gets a 64 bit value from memory using a 64 bit word offset.
         *
         * @param base   the base address
         * @param offset the offset (in 64 bit words) from 'base' from which to load
         * @return the value
         */
/*MAC*/ jlong getLong(Address $base, Offset $offset) {
            return getLongTyped($base, $offset, AddressType_LONG);
        }

        /**
         * Gets a 64 bit value from memory using a UWord offset.
         *
         * @param base   the base address
         * @param offset the offset (in UWords) from 'base' from which to load
         * @return the value
         */
/*MAC*/ jlong getLongAtWord(Address $base, Offset $offset) {
            if (SQUAWK_64 || PLATFORM_UNALIGNED_LOADS) {
                return getLongAtWordTyped($base, $offset, AddressType_LONG);
            } else {
                const int highOffset = (PLATFORM_BIG_ENDIAN) ? $offset     : $offset + 1;
                const int lowOffset  = (PLATFORM_BIG_ENDIAN) ? $offset + 1 : $offset;
                const int high = getIntTyped($base, highOffset, AddressType_LONG);
                const int low  = getIntTyped($base, lowOffset,  AddressType_LONG2);

                //Some strange MSC 6.0 bug prevents the following line from working:
                //return (jlong)(((jlong)high) << 32 | (((jlong)low) & 0xFFFFFFFF));

                //But, for some reason, the following two lines do:
                const jlong res = ((jlong)high) << 32 | (((jlong)low) & 0xFFFFFFFF);
                return res;
            }
        }

        /**
         * Special for popLong.
         *
         */
#if !SQUAWK_64
        jlong getLongAtWordSpecial_pp(Address p1, Address p2) {
            if (C_PARMS_LEFT_TO_RIGHT) {
                return getLongAtWord(p1, 0);
            } else if (C_PARMS_RIGHT_TO_LEFT) {
                return getLongAtWord(p2, 0);
            } else {
                return getLongAtWord(p1<p2 ? p1 : p2, 0);
            }
        }
        jlong getLongAtWordSpecial_mm(Address p1, Address p2) {
            if (C_PARMS_LEFT_TO_RIGHT) {
                return getLongAtWord(p2, 0);
            } else if (C_PARMS_RIGHT_TO_LEFT) {
                return getLongAtWord(p1, 0);
            } else {
                return getLongAtWord(p1<p2 ? p1 : p2, 0);
            }
        }
#endif

        /*-----------------------------------------------------------------------*\
         *                             Memory management                         *
        \*-----------------------------------------------------------------------*/

        /**
         * Zeros a range of words.
         *
         * @param start the start address
         * @param end the end address
         */
/*MAC*/ void zeroWords(UWordAddress $start, UWordAddress $end) {
            assume(isWordAligned((UWord)$start));
            assume(isWordAligned((UWord)$end));
            zeroTypes($start, $end);
            while ($start < $end) {
                *$start = 0;
                $start++;
            }
        }

        /**
         * Allocate a chunk of zeroed memory from RAM with hosted.
         *
         * @param   size        the length in bytes of the object and its header (i.e. the total number of
         *                      bytes to be allocated).
         * @param   arrayLength the number of elements in the array being allocated or -1 if a non-array
         *                      object is being allocated
         * @return a pointer to a well-formed object or null if the allocation failed
         */
/*MAC*/ Address allocate(int $size, Address $klass, int $arrayLength) {
            Address block = java_lang_GC_ramAllocationPointer;
            Offset remainder = Address_diff(java_lang_GC_ramAllocationEndPointer, block);
            if ($size < 0 || lt(remainder, $size)) {
                return null;
            } else {
                Address oop;
                if ($arrayLength == -1) {
                    oop = Address_add(block, HDR_basicHeaderSize);
                    setObject(oop, HDR_klass, $klass);
                } else {
                    oop = Address_add(block, HDR_arrayHeaderSize);
                    setObject(oop, HDR_klass, $klass);
                    if (!setArrayLength(oop, $arrayLength)) {
                        return 0;
                    }
                }
                java_lang_GC_ramAllocationPointer = Address_add(block, $size);
                zeroWords(oop, java_lang_GC_ramAllocationPointer);
                return oop;
            }
        }

        /**
         * Allocate a chunk of zeroed memory from RAM with hosted.
         *
         * @param   size        the length in bytes of the object and its header (i.e. the total number of
         *                      bytes to be allocated).
         * @param   arrayLength the number of elements in the array being allocated or -1 if a non-array
         *                      object is being allocated
         * @return a pointer to a well-formed object or null if the allocation failed
         */
/*MAC*/ Address allocateFast(int $size, Address $klass, int $arrayLength) {
            if (
                java_lang_GC_excessiveGC == true        ||
                java_lang_GC_allocationEnabled == false ||
                java_lang_GC_traceFlags != 0
               ) {
                return null; /* Force call to Java code */
            }
            return allocate($size, $klass, $arrayLength);
        }

        /**
         * Static version of {@link #getDataSize()} so that garbage collector can
         * invoke this method on a possibly forwarded Klass object.
         */
/*MAC*/ int getDataSize(Address $klass) {
            switch (java_lang_Class_classID($klass)) {
                case CID_BOOLEAN:
                case CID_BYTECODE:
                case CID_BYTE: {
                    return 1;
                }
                case CID_CHAR:
                case CID_SHORT: {
                    return 2;
                }
                case CID_DOUBLE:
                case CID_LONG: {
                    return 8;
                }
                case CID_FLOAT:
                case CID_INT: {
                    return 4;
                }
                default: {
                    return HDR_BYTES_PER_WORD;
                }
            }
        }


